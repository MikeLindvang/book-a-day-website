---
alwaysApply: true
description: Comprehensive styling standards for sleek, modern, and consistent UI
---

# Sleek & Modern Styling Standards

This rule ensures **consistent, professional, and modern** styling across the entire sales page builder application. Follow these standards religiously to maintain the sleek aesthetic.

## Quick Reference Checklist

### âœ… For Every Component
- [ ] Uses established color palette (`#3a7ca5`, `#e63946`, `#eee`, etc.)
- [ ] Includes smooth transitions (`transition: all 0.2s ease`)
- [ ] Has proper hover states with subtle transform effects
- [ ] Uses rem units for spacing and typography
- [ ] Implements consistent border-radius (`0.375rem` standard)
- [ ] Follows accessibility guidelines (focus states, contrast)
- [ ] Is responsive with mobile-first approach

### âœ… For Interactive Elements
- [ ] Minimum 44px touch targets on mobile
- [ ] Visible focus indicators for keyboard navigation
- [ ] Loading states for async operations
- [ ] Disabled states with proper visual feedback
- [ ] Smooth micro-interactions and hover effects

### âœ… For Layout Components
- [ ] Uses CSS Grid for complex layouts, Flexbox for components
- [ ] Maintains consistent spacing with design system scale
- [ ] Implements proper semantic HTML structure
- [ ] Includes responsive breakpoints (`max-width: 768px` for mobile)
- [ ] Centers content with max-width constraints (`1200px`)

## Component Classification

### ðŸŽ¨ Design System Priority
1. **Colors**: Always use the established palette - never introduce arbitrary colors
2. **Typography**: Use Open Sans for UI, Merriweather for headings
3. **Spacing**: Follow the rem-based scale (`0.25rem`, `0.5rem`, `1rem`, `1.5rem`, `2rem`, etc.)
4. **Shadows**: Use the elevation system for depth hierarchy
5. **Border Radius**: Consistent rounded corners (`0.375rem` standard)

### ðŸ§© Component Styling Priority
1. **Buttons**: Modern gradients, hover transforms, smooth transitions
2. **Cards**: Subtle shadows, hover elevations, clean backgrounds
3. **Forms**: Floating labels, focus animations, clear error states
4. **Navigation**: Underline effects, glass morphism, sticky behavior
5. **Modals**: Backdrop blur, scale entrance animations, focus trapping

### ðŸ“± Layout Priority
1. **Mobile-First**: Start with mobile styles, enhance for larger screens
2. **Grid Systems**: Use CSS Grid for page layouts, Flexbox for components
3. **Container Widths**: Max 1200px for main content, 800px for text content
4. **Responsive Spacing**: Reduce padding/margins on mobile devices
5. **Touch Optimization**: Adequate spacing between interactive elements

### âš¡ Interaction Priority
1. **Performance**: Use transform and opacity for animations
2. **Accessibility**: Include focus states and keyboard navigation
3. **Micro-interactions**: Subtle hover effects and loading states
4. **Smooth Transitions**: 0.2s for quick feedback, 0.3s for layout changes
5. **User Preferences**: Respect prefers-reduced-motion settings

## Style Inheritance Hierarchy

```
Global Styles (globals.css)
    â†“
Design System Variables (design-system.mdc)
    â†“
Component Base Styles (modern-components.mdc)
    â†“
Layout Patterns (responsive-layouts.mdc)
    â†“
Interaction Layers (interactions-animations.mdc)
    â†“
Accessibility Enhancements (accessibility-best-practices.mdc)
```

## Non-Negotiable Standards

### ðŸš« Never Do These
- Don't use arbitrary colors outside the established palette
- Don't animate expensive properties (width, height, background-color)
- Don't create components without hover states
- Don't forget mobile responsiveness
- Don't skip accessibility features (focus states, alt text, ARIA labels)
- Don't use px units for spacing (use rem)
- Don't create layouts that aren't keyboard navigable

### âœ… Always Do These
- Use the color palette religiously
- Include smooth transitions on interactive elements
- Implement proper focus management
- Test on mobile devices
- Add loading states for async operations
- Use semantic HTML elements
- Follow the established spacing scale
- Include hover and active states

## Code Quality Standards

### CSS Organization
```css
/* Component styles should follow this order: */
.component {
  /* Layout & positioning */
  display: flex;
  position: relative;
  
  /* Box model */
  width: 100%;
  padding: 1rem;
  margin: 0 auto;
  
  /* Typography */
  font-family: 'Open Sans', sans-serif;
  font-size: 1rem;
  font-weight: 600;
  
  /* Visual styling */
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 0.375rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  
  /* Interactions */
  cursor: pointer;
  transition: all 0.2s ease;
}
```

### Naming Conventions
- Use camelCase for CSS modules (`.primaryButton`, `.cardContainer`)
- Use semantic names (`.submitButton` not `.redButton`)
- Include state modifiers (`.button.loading`, `.card.expanded`)
- Use BEM methodology for complex components

### Performance Guidelines
- Use `transform` and `opacity` for animations
- Implement CSS containment when appropriate
- Minimize layout thrashing with `will-change`
- Optimize for Core Web Vitals (LCP, CLS, FID)

## Implementation Workflow

### 1. Planning Phase
Before writing any CSS:
- Review existing similar components
- Check the design system for established patterns
- Plan responsive behavior
- Consider accessibility requirements

### 2. Development Phase
While coding:
- Start with base component styles
- Add responsive behavior
- Implement interactive states
- Test keyboard navigation
- Validate color contrast

### 3. Testing Phase
Before deployment:
- Test on multiple device sizes
- Verify keyboard accessibility
- Check with screen readers
- Validate performance impact
- Ensure consistent behavior

## Emergency Override Protocol

If you need to break these standards:
1. **Document the reason** in code comments
2. **Plan for refactoring** to align with standards
3. **Minimize scope** of the deviation
4. **Test thoroughly** for unintended consequences

Example:
```css
/* TEMPORARY: Breaking grid system for urgent client demo
   TODO: Refactor to use established layout patterns */
.urgentOverride {
  /* Non-standard styles here */
}
```

## Integration with Existing Codebase

### Key Files to Reference
- **Design Foundation**: [styles/globals.css](mdc:styles/globals.css)
- **Button Patterns**: [components/Button.module.css](mdc:components/Button.module.css)
- **Card Styles**: [components/CardComponent.module.css](mdc:components/CardComponent.module.css)
- **Page Builder**: [components/PageBuilder.module.css](mdc:components/PageBuilder.module.css)
- **Admin Layout**: [app/admin/layout.module.css](mdc:app/admin/layout.module.css)

### Evolution Path
As you build new components:
1. Start with patterns from existing successful components
2. Enhance with modern techniques from these rules
3. Maintain backward compatibility with current styles
4. Gradually update legacy components to match new standards

## Success Metrics

A component meets the sleek & modern standard when:
- âœ… It feels smooth and responsive to interact with
- âœ… It looks consistent with the rest of the application
- âœ… It works seamlessly on all device sizes
- âœ… It's fully accessible via keyboard and screen reader
- âœ… It follows the established design language
- âœ… It performs well without layout thrashing
- âœ… It enhances rather than disrupts the user experience

## Related Rules

For detailed implementation guidance, refer to:
- [Design System](mdc:design-system.mdc) - Colors, typography, spacing
- [Modern Components](mdc:modern-components.mdc) - Component patterns
- [Responsive Layouts](mdc:responsive-layouts.mdc) - Layout strategies
- [Interactions & Animations](mdc:interactions-animations.mdc) - Motion design
- [Accessibility](mdc:accessibility-best-practices.mdc) - Inclusive design

Remember: **Consistency is key to a sleek, professional appearance.** Every component should feel like it belongs to the same cohesive design system.